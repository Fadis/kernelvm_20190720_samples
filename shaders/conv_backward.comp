#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x_id = 1, local_size_y = 1 ) in;
layout(std430, binding = 0) buffer layout0 {
  float input_data[];
};
layout(std430, binding = 1) buffer layout1 {
  float output_data[];
};
layout(std430, binding = 2) buffer layout2 {
  vec4 weight[];
};
layout(std430, binding = 4) buffer layout4 {
  float output_grad[];
};
layout(constant_id = 3) const uint batch_size = 128;
layout(constant_id = 4) const uint output_width = 256;
layout(constant_id = 5) const uint output_height = 256;
layout(constant_id = 6) const uint output_channels = 64;
layout(constant_id = 7) const uint filter_width = 3;
layout(constant_id = 8) const uint filter_height = 3;
layout(constant_id = 9) const uint input_channels = 1;
layout(constant_id = 10) const uint filter_xstride = 1;
layout(constant_id = 11) const uint filter_ystride = 1;
layout(constant_id = 12) const uint xmargin = 1;
layout(constant_id = 13) const uint ymargin = 1;

void adam( inout vec4 weight, in float grad ) {
  const float alpha = 0.0001;
  const float beta1 = 0.9;
  const float beta2 = 0.999;
  const float eps = 1.0e-10;
  weight.w += 1;
  float gt = grad;
  weight.y = beta1 * weight.y + ( 1 - beta1 ) * gt;
  weight.z = beta2 * weight.z + ( 1 - beta2 ) * gt * gt;
  float mhat = weight.y / ( 1 - pow( beta1, weight.w ) );
  float vhat = weight.z / ( 1 - pow( beta2, weight.w ) );
  weight.x -= alpha * mhat / ( sqrt( vhat ) + eps );
}

void sgd( inout vec4 weight, in float grad ) {
  weight = vec4( weight.x - 0.001 * grad, weight.y, weight.z, weight.w );
}

void main() {
  const uint filter_index = gl_GlobalInvocationID.x; 
  const uint filter_x = filter_index % filter_width;
  const uint filter_y = filter_index / filter_width % filter_height;
  const uint input_channel = filter_index / filter_width / filter_height % input_channels;
  const uint output_channel = filter_index / filter_width / filter_height / input_channels;
  const uint filter_size = filter_width * filter_height * input_channels * output_channels;
  const uint input_width = ( output_width - 1 ) * filter_xstride + filter_width - xmargin * 2;
  const uint input_height = ( output_height - 1 ) * filter_ystride + filter_height - ymargin * 2;
  bool filter_oob = filter_index >= filter_size;
  float sum = 0.0;
  for( int data_index = 0; data_index != batch_size; ++data_index ) {
    for( int output_x = 0; output_x != output_width; ++output_x ) {
      for( int output_y = 0; output_y != output_height; ++output_y ) {
        const int output_index =
          int( output_x ) +
          int( output_y ) * int( output_width ) +
          int( output_channel ) * int( output_width * output_height ) +
          data_index * int( output_width * output_height * output_channels );
        const int input_x = output_x * int(filter_xstride) - int(xmargin) + int(filter_x);
        const int input_y = output_y * int(filter_ystride) - int(ymargin) + int(filter_y);
        const bool input_oob =
	  filter_oob ||
	  input_x < 0 || input_x >= input_width ||
	  input_y < 0 || input_y >= input_height;
        const int input_index =
          int( input_x ) +
          int( input_y ) * int( input_width ) +
          int( input_channel ) * int( input_width * input_height ) +
          data_index * int( input_width * input_height * input_channels );
        const float grad = filter_oob ? 0.0 : output_grad[ output_index ];
	const float x = input_oob ? 0.0 : input_data[ input_index ];
        sum += grad * x;
      }
    }
  }
  if( !filter_oob ) {
    adam( weight[ filter_index ], sum );
  }
}

