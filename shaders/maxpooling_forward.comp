#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x_id = 1, local_size_y_id = 2 ) in;
layout(std430, binding = 0) buffer layout0 {
  float input_data[];
};
layout(std430, binding = 1) buffer layout1 {
  float output_data[];
};
layout(constant_id = 3) const uint output_width = 256;
layout(constant_id = 4) const uint output_height = 256;
layout(constant_id = 5) const uint channels = 1;
layout(constant_id = 6) const uint filter_width = 2;
layout(constant_id = 7) const uint filter_height = 2;
layout(constant_id = 8) const uint filter_xstride = 2;
layout(constant_id = 9) const uint filter_ystride = 2;

void main() {
  const uint relative_output_index = gl_GlobalInvocationID.x;
  const uint output_x = relative_output_index % output_width;
  const uint output_y = relative_output_index / output_width % output_height;
  const uint channel = relative_output_index / output_width / output_height;
  const uint input_width = ( output_width - 1 ) * filter_xstride + filter_width;
  const uint input_height = ( output_height - 1 ) * filter_ystride + filter_height;
  const uint data_index = gl_GlobalInvocationID.z;
  const uint output_size = output_width * output_height * channels;
  const uint input_size = input_width * input_height * channels;
  const uint output_index =
    relative_output_index +
    data_index * output_size;
  if( relative_output_index < output_size )
    output_data[ output_index ] = 0.0;
  for( uint x = 0; x != filter_width; ++x ) {
    for( uint y = 0; y != filter_height; ++y ) {
      const uint input_x = x + output_x * filter_xstride;
      const uint input_y = y + output_y * filter_ystride;
      const uint input_index =
        input_x +
        input_y * input_width +
	channel * input_width * input_height +
	data_index * input_width * input_height * channels;
      if( relative_output_index < output_size )
        output_data[ output_index ] = max( output_data[ output_index ], input_data[ input_index ] );
    }
  }
}

