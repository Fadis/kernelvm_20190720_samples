#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x_id = 1, local_size_y_id = 2 ) in;
layout(std430, binding = 0) buffer layout0 {
  float input_data[];
};
layout(std430, binding = 1) buffer layout1 {
  float output_data[];
};
layout(std430, binding = 2) buffer layout2 {
  vec4 weight[];
};
layout(std430, binding = 3) buffer layout3 {
  float input_grad[];
};
layout(std430, binding = 4) buffer layout4 {
  float output_grad[];
};

layout(constant_id = 3) const uint output_width = 256;
layout(constant_id = 4) const uint output_height = 256;
layout(constant_id = 5) const uint filter_width = 3;
layout(constant_id = 6) const uint filter_height = 3;
layout(constant_id = 7) const uint channels = 1;
layout(constant_id = 8) const uint filter_xstride = 1;
layout(constant_id = 9) const uint filter_ystride = 1;
layout(constant_id = 11) const uint xmargin = 1;
layout(constant_id = 12) const uint ymargin = 1;

void main() {
  const uint input_x = gl_GlobalInvocationID.x % output_width;
  const uint input_y = gl_GlobalInvocationID.x / output_width % output_height;
  const uint channel = gl_GlobalInvocationID.x / output_width / output_height;
  const uint data_index = gl_GlobalInvocationID.z;
  const uint input_width = ( output_width - 1 ) * filter_xstride + filter_width - xmargin * 2;
  const uint input_height = ( output_height - 1 ) * filter_ystride + filter_height - ymargin * 2;
  const uint input_size = input_width * input_height * channels;
  const uint relative_input_index = 
    input_x +
    input_y * input_width +
    channel * input_width * input_height;
  const uint input_index =
    relative_input_index +
    data_index * input_width * input_height * channels;
  if( relative_input_index < input_size )
    input_grad[ input_index ] = 0.0;
  for( int x = 0; x != filter_width; ++x ) {
    for( int y = 0; y != filter_height; ++y ) {
      const int output_x = int(input_x) * int(filter_xstride) - int(xmargin) - x;
      const int output_y = int(input_y) * int(filter_ystride) - int(ymargin) - y;
      const bool oob =
        output_x < 0 || output_x >= output_width ||
        output_y < 0 || output_y >= output_height;
      const int relative_output_index =
        output_x +
        output_y * int(output_width) +
        int(channel) * int(output_width * output_height);
      const int output_index =
        relative_output_index +
        int(data_index) * int(output_width * output_height * channels );
      const uint filter_index =
        x +
        y * int(filter_width) +
        channel * int(filter_width * filter_height );
      if( relative_input_index < input_size ) {
        if( !oob ) {
          const float grad = output_grad[ output_index ] * weight[ filter_index ].x;
          input_grad[ input_index ] += grad;
        }
      }
    }
  }
}

