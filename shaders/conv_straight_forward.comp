#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x_id = 1, local_size_y = 1 ) in;
layout(std430, binding = 0) buffer layout0 {
  float input_data[];
};
layout(std430, binding = 1) buffer layout1 {
  float output_data[];
};
layout(std430, binding = 2) buffer layout2 {
  vec4 weight[];
};
layout(constant_id = 3) const uint output_width = 256;
layout(constant_id = 4) const uint output_height = 256;
layout(constant_id = 5) const uint filter_width = 3;
layout(constant_id = 6) const uint filter_height = 3;
layout(constant_id = 7) const uint channels = 1;
layout(constant_id = 8) const uint filter_xstride = 1;
layout(constant_id = 9) const uint filter_ystride = 1;
layout(constant_id = 10) const uint filter_zstride = 2;
layout(constant_id = 11) const uint input_xmargin = 1;
layout(constant_id = 12) const uint input_ymargin = 1;

void main() {
  const uint relative_output_index = gl_GlobalInvocationID.x;
  const uint output_x = relative_output_index % output_width;
  const uint output_y = relative_output_index / output_width % output_height;
  const uint channel = relative_output_index / output_width / output_height;
  const uint input_width = ( output_width - 1 ) * filter_xstride + filter_width - input_xmargin * 2;
  const uint input_height = ( output_height - 1 ) * filter_ystride + filter_height - input_ymargin * 2;
  const uint data_index = gl_GlobalInvocationID.z;
  const uint output_size = output_width * output_height * channels;
  const uint input_size = input_width * input_height * channels;
  const uint output_index =
    relative_output_index +
    data_index * output_width * output_height * channels;
  if( relative_output_index < output_size )
    output_data[ output_index ] = 0.0;
  for( int x = 0; x != filter_width; ++x ) {
    for( int y = 0; y != filter_height; ++y ) {
      const int input_x = int(output_x) * int(filter_xstride) - int(input_xmargin) + x;
      const int input_y = int(output_y) * int(filter_ystride) - int(input_ymargin) + y;
      const bool oob =
        input_x < 0 || input_x >= input_width ||
        input_y < 0 || input_y >= input_height;
      const int input_index =
        input_x +
        input_y * int(input_width) +
        int(channel) * int(input_width * input_height) +
        int(data_index) * int(input_width * input_height * channels );
      const uint filter_index =
        x +
        y * int(filter_width) +
        channel * int(filter_width * filter_height);
      if( relative_output_index < output_size ) {
        if( !oob )
          output_data[ output_index ] += input_data[ input_index ] * weight[ filter_index ].x;
      }
    }
  }
}

