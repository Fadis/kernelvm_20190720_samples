#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 1, local_size_y_id = 1 ) in;
layout(std430, binding = 0) buffer layout0 {
  float input_data[];
};
layout(std430, binding = 2) buffer layout2 {
  vec4 weight[];
};
layout(std430, binding = 3) buffer layout3 {
  float input_grad[];
};
layout(std430, binding = 4) buffer layout4 {
  float output_grad[];
};
layout(constant_id = 3) const uint height = 1024;
layout(constant_id = 4) const uint local_memory_size = 1024;
layout(constant_id = 5) const uint batch_size = 128;
shared float local_sum[ local_memory_size ];


void adam( inout vec4 weight, in float grad ) {
  const float alpha = 0.001;
  const float beta1 = 0.9;
  const float beta2 = 0.999;
  const float eps = 1.0e-10;
  weight.w += 1;
  float gt = grad;
  weight.y = beta1 * weight.y + ( 1 - beta1 ) * gt;
  weight.z = beta2 * weight.z + ( 1 - beta2 ) * gt * gt;
  float mhat = weight.y / ( 1 - pow( beta1, weight.w ) );
  float vhat = weight.z / ( 1 - pow( beta2, weight.w ) );
  weight.x -= alpha * mhat / ( sqrt( vhat ) + eps );
}

void momentum_sgd( inout vec4 weight, in float grad ) {
  float delta = - 0.00001 * grad + 0.9 * weight.y;
  weight.x += delta;
  weight.y = delta;
}

void sgd( inout vec4 weight, in float grad ) {
  weight = vec4( weight.x - 0.01 * grad, weight.y, weight.z, weight.w );
}

float large_sum( in float value ) {
  float sg_sum = subgroupAdd( value );
  local_sum[ gl_SubgroupID ] = sg_sum;
  barrier();
  uint len = gl_NumSubgroups;
  while( len > 1 ) {
    uint index = gl_SubgroupInvocationID + gl_SubgroupID * gl_SubgroupSize;
    float sum = subgroupAdd( index < len ? local_sum[ index ] : 0.0 );
    local_sum[ gl_SubgroupID ] = sum;
    barrier();
    len /= gl_SubgroupSize;
  }
  barrier();
  return local_sum[ 0 ];
}

void main() {
  const uint input_index = gl_GlobalInvocationID.x;
  const uint output_index = gl_GlobalInvocationID.y;
  const uint input_width = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
  const uint output_width = gl_WorkGroupSize.y * gl_NumWorkGroups.y;
  float grad_w_sum = 0.0;
  for( uint data_index = 0; data_index != batch_size; data_index++ ) {
    input_grad[ input_index + data_index * /*height*/ input_width ] = 0.0;
    for( uint offset = 0; offset < height; offset += output_width ) {
      float grad_x = ( offset + output_index ) < height ? weight[ offset + output_index + input_index * height ].x * output_grad[ offset + output_index + data_index * height ] : 0.0;
      input_grad[ input_index + data_index * /*height*/ input_width ] += large_sum( grad_x );
    }
  }
  for( uint offset = 0; offset < height; offset += output_width ) {
    float grad_w_sum = 0.0;
    for( uint data_index = 0; data_index != batch_size; data_index++ ) {
      float grad_w = ( offset + output_index ) < height ? input_data[ input_index + data_index * input_width ] * output_grad[ offset + output_index + data_index * height ] : 0.0;
      grad_w_sum += grad_w;
    }
    if( ( offset + output_index ) < height )
      adam( weight[ offset + output_index + input_index * height ], grad_w_sum );
  }
}

