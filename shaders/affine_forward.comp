#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x_id = 1, local_size_y = 1 ) in;
layout(std430, binding = 0) buffer layout0 {
  float input_data[];
};
layout(std430, binding = 1) buffer layout1 {
  float output_data[];
};
layout(std430, binding = 2) buffer layout2 {
  vec4 weight[];
};
layout(constant_id = 3) const uint width = 1024;
layout(constant_id = 4) const uint local_memory_size = 64;
shared float local_sum[ local_memory_size ];

float large_sum( in float value ) {
  float sg_sum = subgroupAdd( value );
  local_sum[ gl_SubgroupID ] = sg_sum;
  barrier();
  uint len = gl_NumSubgroups;
  while( len > 1 ) {
    uint index = gl_SubgroupInvocationID + gl_SubgroupID * gl_SubgroupSize;
    float sum = subgroupAdd( index < len ? local_sum[ index ] : 0.0 );
    local_sum[ gl_SubgroupID ] = sum;
    barrier();
    len /= gl_SubgroupSize;
  }
  barrier();
  return local_sum[ 0 ];
}

void main() {
  const uint input_index = gl_GlobalInvocationID.x;
  const uint output_index = gl_GlobalInvocationID.y;
  const uint data_index = gl_GlobalInvocationID.z;
  const uint input_width = gl_WorkGroupSize.x * gl_NumWorkGroups.x;
  const uint output_width = gl_WorkGroupSize.y * gl_NumWorkGroups.y;
  output_data[ output_index + data_index * output_width ] = 0.0;
  for( uint offset = 0; offset < width; offset += input_width ) {
    float value = ( offset + input_index ) < width ? input_data[ offset + input_index + data_index * width ] * weight[ output_index + ( offset + input_index ) * output_width ].x : 0.0;
    output_data[ output_index + data_index * output_width ] += large_sum( value );
  }
}

